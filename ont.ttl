# baseURI: https://data.surroundaustralia.com/def/provworkflow/ontology
# imports: http://www.w3.org/ns/prov-o

@prefix : <https://data.surroundaustralia.com/def/provworkflow/> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix prov: <http://www.w3.org/ns/prov#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix skos: <http://www.w3.org/2004/02/skos/core#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .


:ontology
  a owl:Ontology ;
  owl:imports <http://www.w3.org/ns/prov-o> ;
  skos:definition """This Ontology defines a data model which is an extension to PROV-O, the Provenance Ontology. This model is designed to specify the outputs of ProvWorkflow tooling.

The intended use of this ontology is to provide the reference model, data according to which should be produced by application code in programming languages such as Python which will be written to enable executable workflows to report their actions in a PROV-O compatable way. 

The additions to PROV-O made by this data model are designed to ensure the creation of well connected and well described PROV-O elements and also PROV-O element paterns that work well in data interoggation tooling, such as the SURROUND Ontology Platform."""@en ;
  skos:prefLabel "ProvWorkflow Ontology" ;
.

prov:Activity
  rdfs:subClassOf :ProvReporter ;
.
prov:Agent
  rdfs:subClassOf :ProvReporter ;
.
prov:Entity
  rdfs:subClassOf :ProvReporter ;
.

:Block
  a owl:Class ;
  rdfs:subClassOf prov:Activity ;
  rdfs:subClassOf [
      a owl:Restriction ;
      owl:allValuesFrom xsd:anyURI ;
      owl:onProperty owl:versionIRI ;
    ] ;
  rdfs:subClassOf [
      a owl:Restriction ;
      owl:allValuesFrom xsd:dateTimeStamp ;
      owl:onProperty prov:endedAtTime ;
    ] ;
  rdfs:subClassOf [
      a owl:Restriction ;
      owl:allValuesFrom xsd:dateTimeStamp ;
      owl:onProperty prov:startedAtTime ;
    ] ;
  rdfs:subClassOf [
      a owl:Restriction ;
      owl:cardinality "1"^^xsd:nonNegativeInteger ;
      owl:onProperty prov:endedAtTime ;
    ] ;
  rdfs:subClassOf [
      a owl:Restriction ;
      owl:cardinality "1"^^xsd:nonNegativeInteger ;
      owl:onProperty prov:startedAtTime ;
    ] ;
  rdfs:subClassOf [
      a owl:Restriction ;
      owl:minCardinality "1"^^xsd:nonNegativeInteger ;
      owl:onProperty owl:versionIRI ;
    ] ;
  rdfs:subClassOf [
      a owl:Restriction ;
      owl:minCardinality "1"^^xsd:nonNegativeInteger ;
      owl:onProperty prov:generated ;
    ] ;
  rdfs:subClassOf [
      a owl:Restriction ;
      owl:minCardinality "1"^^xsd:nonNegativeInteger ;
      owl:onProperty prov:used ;
    ] ;
  skos:definition """A Block is a PROV Activity that is a part of a Workflow.

Blocks use inputs and produce outputs. Some Block inputs and outputs are inputs and outputs to the Workflow as a whole while others are not seen at the Workflow level - where the outputs from one Block within a Workflow are consumed entirely by anothe rBlock within the Workflow.

Block may be specialised in application code class/object hierarchies to create subclasses of Block. If this happens, subclasses of Block must be automatically identified by the application coding, i.e. new subclasses will not be added to this ProvWorkflow Specification. 

A Block must always have at least one input (an Entity that it uses, prov:used) at least one thing. The input can be a data location, an API endpoint, a literal value, a random number seed etc.

A Block must always have at least one output (an Entity that it generates, prov:generated). The thing generated can be a file on a system, a state change in an existing digital asset etc.

Each Block must have one and only one owl:versionIRI property that indicates an xsd:anyURI object, that is a URI literal. We (SURROUND) further require that the literal be a Git resource in BitBucket, CodeCommit etc. This owl:versionIRI property indicates the specific version of the source code used by this instance of the Workflow. provworkflow, as implemented in Python, will automatically calcualte this value for each Block using Python / Git interactions."""@en ;
  skos:example """:block_x
    a profwf:Block ;
    skos:prefLabel \"Block X\" ;
    skos:defintion \"A Block to do X\" ;
    prov:used :entity_h ;
    prov:generated :entity_j ;
    prov:startedAtTime \"2020-12-18T12:30:16+10:00\"^^xsd:dateTimeStamp ;
    prov:endedAtTime \"2020-12-18T12:30:20+10:00\"^^xsd:dateTimeStamp ;
.

entity_h
    a prov:Entity ;
    skos:note \"A Web Service to access data\" ;
    dcat:accessURL <http://some-url.org/service/x> ;
.    

:entity_j
    a prov:Entity ;
    skos:note \"A literal entity - integer\" ;
    prov:value 42 ;
.
""" ;
  skos:prefLabel "Block" ;
.
:ProvReporter
  a owl:Class ;
  rdfs:subClassOf owl:Thing ;
  skos:definition """A Provenance Reporter is an OWL Thing that reports PROV-O provenance for it, relevant to its PROV type.

The Provenance Reporter class is the superclass of all PROV classes (Entity, Activity, Agent) and should not be used (have instance of it created) directly, instead instances should be created of is subclasses, particularly Workflow & Block (transitive subclasses of it by virtue of bieng subclasses of prov:Activity).

The intention of ProvReporter is to act as a top class for the ProvWorkflow specification, as needed by tools such as EDG/SOP."""@en ;
  skos:prefLabel "Provenance Reporter" ;
.
:Workflow
  a owl:Class ;
  rdfs:subClassOf prov:Activity ;
  rdfs:subClassOf [
      a owl:Restriction ;
      owl:allValuesFrom xsd:anyURI ;
      owl:onProperty owl:versionIRI ;
    ] ;
  rdfs:subClassOf [
      a owl:Restriction ;
      owl:allValuesFrom xsd:dateTimeStamp ;
      owl:onProperty prov:endedAtTime ;
    ] ;
  rdfs:subClassOf [
      a owl:Restriction ;
      owl:allValuesFrom xsd:dateTimeStamp ;
      owl:onProperty prov:startedAtTime ;
    ] ;
  rdfs:subClassOf [
      a owl:Restriction ;
      owl:cardinality "1"^^xsd:nonNegativeInteger ;
      owl:onProperty prov:endedAtTime ;
    ] ;
  rdfs:subClassOf [
      a owl:Restriction ;
      owl:cardinality "1"^^xsd:nonNegativeInteger ;
      owl:onProperty prov:startedAtTime ;
    ] ;
  rdfs:subClassOf [
      a owl:Restriction ;
      owl:minCardinality "1"^^xsd:nonNegativeInteger ;
      owl:onProperty owl:versionIRI ;
    ] ;
  rdfs:subClassOf [
      a owl:Restriction ;
      owl:minCardinality "1"^^xsd:nonNegativeInteger ;
      owl:onProperty prov:generated ;
    ] ;
  rdfs:subClassOf [
      a owl:Restriction ;
      owl:minCardinality "1"^^xsd:nonNegativeInteger ;
      owl:onProperty prov:used ;
    ] ;
  rdfs:subClassOf [
      a owl:Restriction ;
      owl:minCardinality "1"^^xsd:nonNegativeInteger ;
      owl:onProperty :hadBlock ;
    ] ;
  skos:definition """A Workflow is a PROV Activity that contains one or more Blocks.

Workflows represent a complete system task that will likely be composed of multiple steps that should be represented by Blocks. A Workflow may be manually-triggered (by a human) or by an external system event or schedule.

A Workflow must always have at least one input (an Entity that it uses, prov:used) at least one thing. The input can be a data location, an API endpoint, a literal value, a random number seed etc.

A Workflow must always have at least one output (an Entity that it generates, prov:generated). The thing generated can be a file on a system, a state change in an existing digital asset etc. 

Workflows' inputs and outputs should be automatically derived from the Blocks within the Workflow and no Workflow input our output should exist that is not also an input/output to a Block within that Workflow.

Each Workflow must have one and only one owl:versionIRI property that indicates an xsd:anyURI object, that is a URI literal. We (SURROUND) further require that the literal be a Git resource in BitBucket, CodeCommit etc. This owl:versionIRI property indicates the specific version of the source code used by this instance of the Workflow. provworkflow, as implemented in Python, will automatically calcualte this value for each Workflow using Python / Git interactions."""@en ;
  skos:example """# a minimal Workflow instance
:workflow_a
    a profwf:Workflow ;
    skos:prefLabel \"Workflow A\" ;
    skos:defintion \"A Workflow to do A\" ;
    provworkflow:hadBlock :block_x , :block_y ;
    prov:used :entity_h , :entity_i ;
    prov:generated :entity_k ;
    prov:startedAtTime \"2020-12-18T12:30:15+10:00\"^^xsd:dateTimeStamp ;
    prov:endedAtTime \"2020-12-18T12:30:25+10:00\"^^xsd:dateTimeStamp ;
.

:block_x
    a profwf:Block ;
    skos:prefLabel \"Block X\" ;
    skos:defintion \"A Block to do X\" ;
    prov:used :entity_h ;
    prov:generated :entity_j ;
    prov:startedAtTime \"2020-12-18T12:30:16+10:00\"^^xsd:dateTimeStamp ;
    prov:endedAtTime \"2020-12-18T12:30:20+10:00\"^^xsd:dateTimeStamp ;
.

:block_y
    a profwf:Block ;
    skos:prefLabel \"Block Y\" ;
    skos:defintion \"A Block to do Y\" ;
    prov:used , :entity_i , :entity_j ;
    prov:generated :entity_k ;
    prov:startedAtTime \"2020-12-18T12:30:16+10:00\"^^xsd:dateTimeStamp ;
    prov:endedAtTime \"2020-12-18T12:30:20+10:00\"^^xsd:dateTimeStamp ;
.

# :entity_j is not reported at the Workflow level since it is entirely internal 
# having been generated by :block_x and used by :block_y""" ;
  skos:prefLabel "Workflow" ;
.
:hadBlock
  a owl:ObjectProperty ;
  rdfs:domain :Workflow ;
  rdfs:range :Block ;
  skos:definition "A Workflow, when it executed, triggered a Block, therefore the Workflow had a Block."@en ;
  skos:prefLabel "had block" ;
.
